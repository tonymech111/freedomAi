;; InfoFi NFT Collection Smart Contract
;; Represents tokenized research reports and signals as NFTs

#include "stdlib.fc";

;; Storage
;; next_item_index - counter for NFT IDs
;; collection_content - metadata URI
;; owner_address - collection owner
;; nft_item_code - code for individual NFT items

(int, cell, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_uint(64),     ;; next_item_index
        ds~load_ref(),        ;; collection_content
        ds~load_msg_addr(),   ;; owner_address
        ds~load_ref()         ;; nft_item_code
    );
}

() save_data(int next_item_index, cell collection_content, slice owner_address, cell nft_item_code) impure inline {
    set_data(begin_cell()
        .store_uint(next_item_index, 64)
        .store_ref(collection_content)
        .store_slice(owner_address)
        .store_ref(nft_item_code)
        .end_cell()
    );
}

;; Deploy new NFT item
cell calculate_nft_item_state_init(int item_index, cell nft_item_code) {
    cell data = begin_cell()
        .store_uint(item_index, 64)
        .store_slice(my_address())
        .end_cell();
    
    return begin_cell()
        .store_uint(0, 2)
        .store_dict(nft_item_code)
        .store_dict(data)
        .store_uint(0, 1)
        .end_cell();
}

slice calculate_nft_item_address(int wc, cell state_init) {
    return begin_cell()
        .store_uint(4, 3)
        .store_int(wc, 8)
        .store_uint(cell_hash(state_init), 256)
        .end_cell()
        .begin_parse();
}

;; Mint new NFT
() mint_nft(slice to_address, cell nft_content, int stake_amount) impure {
    var (next_item_index, collection_content, owner_address, nft_item_code) = load_data();
    
    ;; Calculate NFT address
    cell state_init = calculate_nft_item_state_init(next_item_index, nft_item_code);
    slice nft_address = calculate_nft_item_address(0, state_init);
    
    ;; Deploy NFT
    var msg = begin_cell()
        .store_uint(0x18, 6)
        .store_slice(nft_address)
        .store_coins(50000000)  ;; 0.05 TON for deployment
        .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
        .store_ref(state_init)
        .store_ref(begin_cell()
            .store_uint(1, 32)  ;; op: transfer
            .store_uint(0, 64)  ;; query_id
            .store_slice(to_address)
            .store_ref(nft_content)
            .store_coins(stake_amount)
            .end_cell())
        .end_cell();
    
    send_raw_message(msg, 1);
    
    ;; Increment counter
    next_item_index += 1;
    save_data(next_item_index, collection_content, owner_address, nft_item_code);
}

;; Get collection data
(int, cell, slice) get_collection_data() method_id {
    var (next_item_index, collection_content, owner_address, _) = load_data();
    return (next_item_index, collection_content, owner_address);
}

;; Get NFT address by index
slice get_nft_address_by_index(int index) method_id {
    var (_, _, _, nft_item_code) = load_data();
    cell state_init = calculate_nft_item_state_init(index, nft_item_code);
    return calculate_nft_item_address(0, state_init);
}

;; Main receiver
() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) {
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    
    if (flags & 1) {
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    int op = in_msg_body~load_uint(32);
    
    ;; Mint operation
    if (op == 1) {
        var (_, _, owner_address, _) = load_data();
        throw_unless(401, equal_slices(sender_address, owner_address));
        
        slice to_address = in_msg_body~load_msg_addr();
        cell nft_content = in_msg_body~load_ref();
        int stake_amount = in_msg_body~load_coins();
        
        mint_nft(to_address, nft_content, stake_amount);
        return ();
    }
    
    throw(0xffff);
}
